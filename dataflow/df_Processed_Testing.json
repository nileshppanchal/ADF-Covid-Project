{
	"name": "df_Processed_Testing",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_ecdc_testing",
						"type": "DatasetReference"
					},
					"name": "sourceTesting"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "sourceDimCountry"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date",
						"type": "DatasetReference"
					},
					"name": "sourceDimDate"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_Processed_ecdc_Testing",
						"type": "DatasetReference"
					},
					"name": "sinkTestingData"
				}
			],
			"transformations": [
				{
					"name": "lookupCountry"
				},
				{
					"name": "selectAfterLookup"
				},
				{
					"name": "joinDimDate"
				},
				{
					"name": "derivedColDimDate"
				},
				{
					"name": "selectDimDate"
				},
				{
					"name": "dimWeek"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          year_week as string,",
				"          new_cases as string,",
				"          tests_done as string,",
				"          population as string,",
				"          testing_rate as string,",
				"          positivity_rate as string,",
				"          testing_data_source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceTesting",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceDimCountry",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceDimDate",
				"sourceTesting, sourceDimCountry lookup(sourceTesting@country == sourceDimCountry@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupCountry",
				"lookupCountry select(mapColumn(",
				"          country = sourceTesting@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          year_week,",
				"          new_cases,",
				"          tests_done,",
				"          population = sourceTesting@population,",
				"          testing_rate,",
				"          positivity_rate,",
				"          testing_data_source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectAfterLookup",
				"selectAfterLookup, dimWeek join(year_week == WeekOfYear,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimDate",
				"sourceDimDate derive(WeekOfYear = year + \"-W\" + lpad(week_of_year, 2, \"0\")) ~> derivedColDimDate",
				"derivedColDimDate select(mapColumn(",
				"          date,",
				"          WeekOfYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectDimDate",
				"selectDimDate aggregate(groupBy(WeekOfYear),",
				"     WeekStartDate = min(date),",
				"          WeekEndDate = max(date)) ~> dimWeek",
				"joinDimDate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkTestingData"
			]
		}
	}
}