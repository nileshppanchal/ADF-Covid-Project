{
	"name": "df_cases_deaths",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_cases_and_deaths",
						"type": "DatasetReference"
					},
					"name": "sourceCasesDeaths"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "sourceCountryLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_Processed_ecdc_cases_deaths",
						"type": "DatasetReference"
					},
					"name": "sinkProcessedData"
				}
			],
			"transformations": [
				{
					"name": "filterEuropeOnly"
				},
				{
					"name": "selectReruiredColumns"
				},
				{
					"name": "pivotConfirmedCasesDeaths"
				},
				{
					"name": "lookupToGetCountryCodes"
				},
				{
					"name": "selectColumsForSink"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as integer,",
				"          date as date,",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceCasesDeaths",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false) ~> sourceCountryLookup",
				"sourceCasesDeaths filter(continent == 'Europe' &&  not(isNull(country_code))) ~> filterEuropeOnly",
				"filterEuropeOnly select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          source,",
				"          each(match(name=='date'),",
				"               'reported_'+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectReruiredColumns",
				"selectReruiredColumns pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          source,",
				"          reported_date),",
				"     pivotBy(indicator, ['deaths', 'confirmed cases']),",
				"     count = sum(daily_count),",
				"     columnNaming: '$V$N',",
				"     lateral: true) ~> pivotConfirmedCasesDeaths",
				"pivotConfirmedCasesDeaths, sourceCountryLookup lookup(pivotConfirmedCasesDeaths@country == sourceCountryLookup@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupToGetCountryCodes",
				"lookupToGetCountryCodes select(mapColumn(",
				"          country = pivotConfirmedCasesDeaths@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population = pivotConfirmedCasesDeaths@population,",
				"          confirmed_cases_count = {confirmed casescount},",
				"          deaths_count = deathscount,",
				"          source,",
				"          reported_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumsForSink",
				"selectColumsForSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkProcessedData"
			]
		}
	}
}