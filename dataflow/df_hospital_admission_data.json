{
	"name": "df_hospital_admission_data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_ecdc_hospitalization",
						"type": "DatasetReference"
					},
					"name": "SourceHospitalECDCRawData"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "sourceCountryCodes"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date",
						"type": "DatasetReference"
					},
					"name": "sourceDateLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_Processed_ecdc_hoppital_weekly",
						"type": "DatasetReference"
					},
					"name": "sinkWeekly"
				},
				{
					"dataset": {
						"referenceName": "ds_Processed_hospitalization_daily",
						"type": "DatasetReference"
					},
					"name": "sinkDaily"
				}
			],
			"transformations": [
				{
					"name": "selectCoumnsInUse"
				},
				{
					"name": "lookupCountryMapping"
				},
				{
					"name": "selectCountryLookupColumns"
				},
				{
					"name": "splitWeeklyDailyIndecators"
				},
				{
					"name": "derivedColumnWeekName"
				},
				{
					"name": "aggregateWeeksInYear"
				},
				{
					"name": "joinSplitDatatoWeekDates"
				},
				{
					"name": "pivotWeekly"
				},
				{
					"name": "selectColumnsToUseforPivot"
				},
				{
					"name": "selectColumnInUseForDaily"
				},
				{
					"name": "pivotDailyCounts"
				},
				{
					"name": "sortWeekly"
				},
				{
					"name": "sortDaily"
				},
				{
					"name": "selectWeeklyForSink"
				},
				{
					"name": "selectDailyForSink"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceHospitalECDCRawData",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceCountryCodes",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceDateLookup",
				"SourceHospitalECDCRawData select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_year_week = year_week,",
				"          source,",
				"          each(match(name=='date'),",
				"               'reported_'+$$ = $$),",
				"          each(match(name=='value'),",
				"               'indecator_count' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCoumnsInUse",
				"selectCoumnsInUse, sourceCountryCodes lookup(selectCoumnsInUse@country == sourceCountryCodes@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupCountryMapping",
				"lookupCountryMapping select(mapColumn(",
				"          country = selectCoumnsInUse@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          indicator,",
				"          indecator_count,",
				"          year_week = reported_year_week,",
				"          reported_date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCountryLookupColumns",
				"selectCountryLookupColumns split(indicator == 'Weekly new hospital admissions per 100k' || indicator ==  'Weekly new ICU admissions per 100k',",
				"     disjoint: false) ~> splitWeeklyDailyIndecators@(WeeklySplitData, DailySplitData)",
				"sourceDateLookup derive(week_of_year = lpad(week_of_year, 2, '0'),",
				"          year_week_derived = concat(year,'-W', lpad(week_of_year, 2, '0'))) ~> derivedColumnWeekName",
				"derivedColumnWeekName aggregate(groupBy(year_week_derived),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> aggregateWeeksInYear",
				"splitWeeklyDailyIndecators@WeeklySplitData, aggregateWeeksInYear join(year_week == year_week_derived,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSplitDatatoWeekDates",
				"selectColumnsToUseforPivot pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          year_week,",
				"          source,",
				"          week_start_date,",
				"          week_end_date),",
				"     pivotBy(indicator, ['Weekly new ICU admissions per 100k', 'Weekly new hospital admissions per 100k']),",
				"     count = sum(indecator_count),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivotWeekly",
				"joinSplitDatatoWeekDates select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          indicator,",
				"          indecator_count,",
				"          year_week,",
				"          source,",
				"          week_start_date,",
				"          week_end_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumnsToUseforPivot",
				"splitWeeklyDailyIndecators@DailySplitData select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          indicator,",
				"          indecator_count,",
				"          reported_date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumnInUseForDaily",
				"selectColumnInUseForDaily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          source),",
				"     pivotBy(indicator, ['Daily ICU occupancy', 'Daily hospital occupancy']),",
				"     count = sum(indecator_count),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivotDailyCounts",
				"pivotWeekly sort(desc(year_week, true),",
				"     asc(country, true)) ~> sortWeekly",
				"pivotDailyCounts sort(desc(reported_date, true),",
				"     asc(country, true)) ~> sortDaily",
				"sortWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          year_week,",
				"          source,",
				"          week_start_date,",
				"          week_end_date,",
				"          count_weekly_new_ICU_admissions_per_100k = {countWeekly new ICU admissions per 100k},",
				"          count_weekly_new_hospital_admissions_per_100k = {countWeekly new hospital admissions per 100k}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectWeeklyForSink",
				"sortDaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          source,",
				"          count_Daily_ICU_occupancy = {countDaily ICU occupancy},",
				"          countDaily_hospital_occupancy = {countDaily hospital occupancy}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectDailyForSink",
				"selectWeeklyForSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkWeekly",
				"selectDailyForSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkDaily"
			]
		}
	}
}